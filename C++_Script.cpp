#include <iostream>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

void printMatrix(const vector<vector<float>>& matrix) {
    for (const auto& row : matrix) {
        for (float element : row) {
            cout << element << "\t";
        }
        cout << endl;
    }
}

int gaussEliminationLS(vector<vector<float>>& a, vector<float>& x) {
    int m = a.size();
    int n = a[0].size();

    for (int i = 0; i < m - 1; i++) {
        // Partial Pivoting
        for (int k = i + 1; k < m; k++) {
            if (fabs(a[i][i]) < fabs(a[k][i])) {
                swap(a[i], a[k]);
            }
        }

        // Begin Gauss Elimination
        for (int k = i + 1; k < m; k++) {
            if (a[i][i] == 0) {
                break;
            }
            float term = a[k][i] / a[i][i];
            for (int j = 0; j < n; j++) {
                a[k][j] -= term * a[i][j];
            }
        }
    }

    // Begin Back-substitution
    for (int i = m - 1; i >= 0; i--) {
        x[i] = a[i][n - 1];
        for (int j = i + 1; j < n - 1; j++) {
            x[i] -= a[i][j] * x[j];
        }
        if (x[i] == 0) {
            if (a[i][i] == 0) {
                cout << "Infinite solution exists" << endl;
                return -1;
            }
        }
        if (x[i] != 0) {
            if (a[i][i] == 0) {
                cout << "No solution exists" << endl;
                return -1;
            }
        }
        x[i] /= a[i][i];
    }
    return 0;
}

int main() {
    srand(time(NULL));
    int m = 5, n = 6;
    vector<vector<float>> U(m, vector<float>(n));

    for (int j = 0; j < 5; j++) {
        for (int k = 0; k < 6; k++) {
            U[j][k] = static_cast<float>(rand()) / static_cast<float>(RAND_MAX / 10);
        }
    }

    cout << "Matrix U:" << endl;
    printMatrix(U);
   
    /*for (int i = 0; i < 5; i++) {
        for(int j=0;j<6;j++){
           if (i != 0&&j!=0) {
            cout << ", ";
        }
        cout << U[i][j];
        }
        
    }*/
    cout<<endl;
 
    vector<float> x(5, 0);
    float error = 0;
    vector<unsigned int> RiscV_O(5);

    cout << "Enter Hex Values Generated By RISC-V For Above Input:" << endl;
    for (int g = 0; g < 5; g++) {
        cin >> hex >> RiscV_O[g];
    }

    int result = gaussEliminationLS(U, x);

    cout << "\nThe solution of linear equations is:" << endl;
    for (int i = 0; i < n - 1; i++) {
        cout << "x[" << i + 1 << "] = " << x[i] << endl;
        unsigned int ui;
        cout << endl;
        float f = *reinterpret_cast<float*>(&RiscV_O[i]);
        cout << "X_RISC-V[" << i + 1 << "] = " << f << endl;
        cout << endl;
        float e = fabs(x[i]) - fabs(f);
        error += fabs(e);
        cout << e << endl;
    }

    error /= 5;
    cout << "Mean_Error = " << error << endl;

    return 0;
}
